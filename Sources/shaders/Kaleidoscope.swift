//
//  Kaleidoscope.swift
//  Generated by Metal Studio Final
//

import Metal
import MetalKit
import simd

class Kaleidoscope {
    private let device: MTLDevice
    private let pipelineState: MTLRenderPipelineState
    private let commandQueue: MTLCommandQueue
    
    struct Uniforms {
        var time: Float = 0
        var resolution: SIMD2<Float>
        var mouse: SIMD2<Float> = SIMD2<Float>(0.5, 0.5)
        var param1: Float = 6.0
        var param2: Float = 0.5
        var param3: Float = 1.0
        var param4: Float = 1.0
    }
    
    private var uniforms = Uniforms(resolution: SIMD2<Float>(1920, 1080))
    
    init(device: MTLDevice) throws {
        self.device = device
        self.commandQueue = device.makeCommandQueue()!
        
        let shaderSource = """
#include <metal_stdlib>
using namespace metal;

struct VertexOut {
    float4 position [[position]];
    float2 texCoord;
};

struct Uniforms {
    float time;
    float2 resolution;
    float2 mouse;
    float param1; // segments
    float param2; // rotation_speed
    float param3; // zoom
    float param4; // color_blocks
    float param5;
    float param6;
    float param7;
    float param8;
};

vertex VertexOut vertexShader(uint vertexID [[vertex_id]]) {
    VertexOut out;
    float2 positions[4] = {
        float2(-1, -1), float2(1, -1),
        float2(-1, 1), float2(1, 1)
    };
    out.position = float4(positions[vertexID], 0, 1);
    out.texCoord = (positions[vertexID] + 1.0) * 0.5;
    return out;
}

float hash(float2 p) {
    p = fract(p * float2(123.34, 456.21));
    p += dot(p, p + 45.32);
    return fract(p.x * p.y);
}

fragment float4 fragmentShader(
    VertexOut in [[stage_in]],
    constant Uniforms& u [[buffer(0)]]
) {
    float2 p = (in.texCoord - 0.5) * 2.0 / u.param3; // zoom
    p.x *= u.resolution.x / u.resolution.y;
    
    // Kaleidoscope transformation
    float angle = atan2(p.y, p.x) + u.time * u.param2;
    float radius = length(p);
    
    float segments = floor(u.param1) * 2.0; // Number of segments (3-12)
    float segmentAngle = 2.0 * M_PI_F / segments;
    angle = fmod(angle, segmentAngle);
    
    if (int(atan2(p.y, p.x) / segmentAngle) % 2 == 1) {
        angle = segmentAngle - angle;
    }
    
    float2 kp = radius * float2(cos(angle), sin(angle));
    
    // Color blocks
    float blockSize = u.param4 * 16.0;
    float2 blockUV = floor(kp * blockSize) / blockSize;
    float colorIndex = hash(blockUV + u.time * 0.1) * 4.0;
    
    float3 color;
    if (colorIndex < 1.0) {
        color = float3(1.0, 0.2, 0.2);
    } else if (colorIndex < 2.0) {
        color = float3(0.2, 1.0, 0.2);
    } else if (colorIndex < 3.0) {
        color = float3(0.2, 0.4, 1.0);
    } else {
        color = float3(1.0, 0.9, 0.2);
    }
    
    // Add some variation
    float pulse = sin(radius * 10.0 - u.time * 3.0) * 0.5 + 0.5;
    color *= 0.7 + 0.3 * pulse;
    
    return float4(color, 1.0);
}
"""
        
        let library = try device.makeLibrary(source: shaderSource, options: nil)
        let vertexFunction = library.makeFunction(name: "vertexShader")!
        let fragmentFunction = library.makeFunction(name: "fragmentShader")!
        
        let pipelineDescriptor = MTLRenderPipelineDescriptor()
        pipelineDescriptor.vertexFunction = vertexFunction
        pipelineDescriptor.fragmentFunction = fragmentFunction
        pipelineDescriptor.colorAttachments[0].pixelFormat = .bgra8Unorm
        
        self.pipelineState = try device.makeRenderPipelineState(descriptor: pipelineDescriptor)
    }
    
    func render(to view: MTKView) {
        guard let drawable = view.currentDrawable,
              let descriptor = view.currentRenderPassDescriptor,
              let commandBuffer = commandQueue.makeCommandBuffer(),
              let encoder = commandBuffer.makeRenderCommandEncoder(descriptor: descriptor) else {
            return
        }
        
        uniforms.time += 0.016 // Assuming 60fps
        uniforms.resolution = SIMD2<Float>(Float(view.drawableSize.width), Float(view.drawableSize.height))
        
        encoder.setRenderPipelineState(pipelineState)
        encoder.setFragmentBytes(&uniforms, length: MemoryLayout<Uniforms>.size, index: 0)
        encoder.drawPrimitives(type: .triangleStrip, vertexStart: 0, vertexCount: 4)
        encoder.endEncoding()
        
        commandBuffer.present(drawable)
        commandBuffer.commit()
    }
}